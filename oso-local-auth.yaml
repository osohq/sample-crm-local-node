facts:
  # Correlates `actor User` to `resource Organization` roles.
  has_role(User:_, String:_, Organization:_):
    query: >
      SELECT users.username, users.role::TEXT, users.org
      FROM users

  # Correlates `actor User` to `global` roles by treating any role assigned to a
  # user in the `_root` org as a `global` role. This might work differently than you
  # might expect by elevating the role of all `_root` users, rather than having a
  # distinct set of `global` users.
  has_role(User:_, String:_):
    query: >
      SELECT
        DISTINCT users.username, users.role::TEXT
      FROM
        users
      WHERE users.org = '_root'

  # Provides the `parent` relationship between `actor User` and `resource
  # Organization`.
  has_relation(User:_, parent, Organization:_):
    query: SELECT username, org FROM users

sql_types:
  User: TEXT
  Organization: TEXT
# For more details about how this interacts with other components of the system,
# see:
# - db_init_template.sql for the application's SQL schema
# - oso-policy.polar for this application's Polar policy, for use in Oso Cloud
